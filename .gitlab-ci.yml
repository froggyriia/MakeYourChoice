variables:
  DOCKER_TLS_CERTDIR: "/certs"
  APP: "my-app"
  TRIVY_CACHE_DIR: ".trivycache"

stages:
  - build
  - test

build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" "$HARBOR_HOST" --password-stdin
  script:
    - docker build -t $APP .
    - docker tag $APP $HARBOR_HOST/$HARBOR_PROJECT/$APP:$CI_COMMIT_SHORT_SHA
    - docker tag $APP $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
    - docker push $HARBOR_HOST/$HARBOR_PROJECT/$APP:$CI_COMMIT_SHORT_SHA
    - docker push $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
  tags:
    - docker

lint:
  stage: test
  image: node:20
  script:
    - cd frontend
    - npm install
    - npm run lint
    - npm run test
  artifacts:
    reports:
      junit: frontend/reports/eslint-report.xml
    paths:
      - frontend/reports/

unit_tests:
  stage: test
  image: node:20
  variables:
    SUPABASE_URL: "$SUPABASE_URL"
    SUPABASE_ANON_KEY: "$SUPABASE_ANON_KEY"
    VITE_SUPABASE_URL: "$SUPABASE_URL"
    VITE_SUPABASE_ANON_KEY: "$SUPABASE_ANON_KEY"
  before_script:
    - cd frontend
    - npm install
    - npx supabase gen types typescript --project-id "$SUPABASE_PROJECT_ID" > src/database.types.ts || true
    - npm update
  script:
    - echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" >> .env
    - echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
    - cat .env
    - npm run test:unit
  artifacts:
    reports:
      junit: frontend/reports/unit-tests.xml
    paths:
      - frontend/reports/

integration_tests:
  stage: test
  image: node:20
  variables:
    SUPABASE_URL: "$SUPABASE_URL"
    SUPABASE_ANON_KEY: "$SUPABASE_ANON_KEY"
    VITE_SUPABASE_URL: "$SUPABASE_URL"
    VITE_SUPABASE_ANON_KEY: "$SUPABASE_ANON_KEY"
  before_script:
    - cd frontend
    - npm install
    - npx supabase gen types typescript --project-id "$SUPABASE_PROJECT_ID" > src/database.types.ts || true
    - npm update
  script:
    - echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" >> .env
    - echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
    - cat .env
    - npm run test:integration
  artifacts:
    reports:
      junit: frontend/reports/integration-tests.xml

container_scanning:
  stage: test
  image:
    name: $HARBOR_HOST/docker-hub-cache/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    TRIVY_USERNAME: "$HARBOR_USERNAME"
    TRIVY_PASSWORD: "$HARBOR_PASSWORD"
    TRIVY_AUTH_URL: "$HARBOR_HOST"
    FULL_IMAGE_NAME: $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
  script:
    - trivy --version
    - time trivy clean --scan-cache
    - time trivy image --download-db-only --no-progress --cache-dir .trivycache/
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  tags:
    - docker
  needs:
    - build

security_scan:
  stage: test
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs --security-checks vuln,config .

performance-test:
  stage: test
  image: cypress/browsers:node-22.17.0-chrome-138.0.7204.92-1-ff-140.0.2-edge-138.0.3351.65-1
  script:
    - npm install -g lighthouse
    - lighthouse --chrome-flags="--no-sandbox --headless" https://make-your-choice.vercel.app/ --output=json --output-path=./lighthouse-report.json